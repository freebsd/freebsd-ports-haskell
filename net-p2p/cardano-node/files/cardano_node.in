#!/bin/sh

# PROVIDE: cardano_node
# REQUIRE: DAEMON
# KEYWORD: shutdown
#
# Add the following lines to /etc/rc.conf to enable this service:
#
# cardano_node_enable:      Set to YES to enable cardano-node.
#                           Default: "NO"
#
# cardano_node_home:        An absolute path to the daemon home directory.
#                           The directory will be created if not exists.
#                           Default: "/var/db/cardano_node"
#
# cardano_node_db:          An absolute path to the database directory.
#                           Default: "${cardano_node_home}/db"
#
# cardano_node_host:        Host address to bind to.
#                           Default: "0.0.0.0"
#
# cardano_node_port:        Port to listen for connections on.
#                           Default: "6000"
#
# cardano_node_socket:      An absolute path to the daemon socket file.
#                           Default: "${cardano_node_home}/cardano-node.sock"
#
# cardano_node_topology:    An absolute or a relative to ${cardano_node_home} path
#                           to the topology JSON file.
#                           Default: "mainnet-topology.json"
#
# cardano_node_config:      An absolute or a relative to ${cardano_node_home} path
#                           to the cardano-node config.json file.
#                           Default: "mainnet-config.json"
#
# cardano_node_flags:       Any additional command line flags to pass to cardano-node.
#                           Default: ""
#

. /etc/rc.subr

name=cardano_node
desc="Cardano Node daemon"
rcvar=cardano_node_enable

start_cmd="${name}_start"
start_precmd="${name}_prestart"
start_postcmd="${name}_poststart"
stop_cmd="${name}_stop"
status_cmd="${name}_status"

extra_commands="status"

load_rc_config $name
: ${cardano_node_enable:=NO}
: ${cardano_node_home:="/var/db/cardano_node"}
: ${cardano_node_db:="${cardano_node_home}/db"}
: ${cardano_node_host:="0.0.0.0"}
: ${cardano_node_port:="6000"}
: ${cardano_node_socket:="${cardano_node_home}/cardano-node.sock"}
: ${cardano_node_topology:="mainnet-topology.json"}
: ${cardano_node_config:="mainnet-config.json"}
: ${cardano_node_flags:=""}

topology_file="${cardano_node_home}/testnet-topology.json"
config_file="${cardano_node_home}/testnet-config.json"
pidfile="/var/run/cardano-node.pid"
logfile="/var/log/cardano-node.log"
flags=run +RTS -N -A64m -n4m -F1.2 -qg1 -RTS \
        --database-path ${cardano_node_db} \
        --host-addr ${cardano_node_host} \
        --port ${cardano_node_port} \
        --socket-path ${cardano_node_socket} \
        --topology ${cardano_node_topology} \
        --config ${cardano_node_config} \
        ${cardano_node_flags}

cardano_node_prestart()
{
    # Create Cardano home directory, if not exists
    if [ ! -d ${cardano_node_home} ]; then
        mkdir -m 700 ${cardano_node_home}
        mkdir -pm 700 ${cardano_node_home}/db
    fi
    # Remove socket file, if there is no pid file
    if [ -S ${cardano_node_socket} -a ! -f $pidfile ]; then
        rm ${cardano_node_socket}
    fi
}

cardano_node_start()
{
    check_startmsgs && echo "Starting ${name}."
    cd $cardano_node_home && /usr/sbin/daemon -p $pidfile -o ${logfile} \
        %%PREFIX%%/bin/cardano-node ${flags} 2>&1 > /dev/null
}

cardano_node_stop()
{
    [ -f $pidfile ] \
        && /bin/kill -INT `cat $pidfile` \
        || echo ${name} not running? \(check ${pidfile}\)
}
cardano_node_status()
{
    [ -f $pidfile ] \
        && echo ${name} is running as pid `cat $pidfile` \
        || echo ${name} is not running.
}

run_rc_command "$1"
